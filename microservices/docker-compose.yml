version: '3.8'

services:

  checkout-gateway:
    build:
      context: ./gateway
    container_name: checkout-gateway
    depends_on:
      config-server:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
    networks:
      - spring-cloud-microservice

  config-server:
    build:
      context: ./config-server
    container_name: config-server
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCHLOCATIONS=file:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ./docker/config-server/config:/app/config
    networks:
      - spring-cloud-microservice
  
  cart-ms:
    build:
      context: ./cart-ms
    container_name: cart-ms
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
    networks:
      - spring-cloud-microservice

  products-ms:
    build:
      context: ./products-ms
    container_name: products-ms
    depends_on:
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - CONFIG_SERVER_URL=http://config-server:8888
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - spring-cloud-microservice
    
  postgres:
    image: postgres:latest
    container_name: postgres-service
    restart: always
    environment:
      POSTGRES_USER: checkout 
      POSTGRES_PASSWORD: checkout
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U checkout"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring-cloud-microservice
      
  prometheus:
    image: prom/prometheus:v2.54.1 # https://hub.docker.com/r/prom/prometheus
    container_name: prometheus-service
    extra_hosts: ['host.docker.internal:host-gateway']
    command:
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - prometheus:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - spring-cloud-microservice

  grafana:
    image: grafana/grafana:10.4.10 # https://hub.docker.com/r/grafana/grafana/tags
    container_name: grafana-service
    extra_hosts: ['host.docker.internal:host-gateway']
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - spring-cloud-microservice

  tempo:
    image: grafana/tempo:2.4.2 # https://hub.docker.com/r/grafana/tempo/tags and https://github.com/grafana/tempo/releases
    container_name: tempo-service
    extra_hosts: ['host.docker.internal:host-gateway']
    command: ['-config.file=/etc/tempo.yml']
    volumes:
      - tempo:/tmp/tempo
      - ./docker/grafana/tempo.yml:/etc/tempo.yml:ro
    ports:
      - "3200:3200"    # tempo
      - "4318:4318"  # otlp http
    networks:
      - spring-cloud-microservice

  loki:
    image: grafana/loki:3.1.2 # https://hub.docker.com/r/grafana/loki/tags and https://github.com/grafana/loki/releases
    container_name: loki-service
    extra_hosts: ['host.docker.internal:host-gateway']
    command: ['-config.file=/etc/loki/local-config.yaml']
    ports:
      - "3100:3100"
    networks:
      - spring-cloud-microservice

volumes:
  prometheus:
    driver: local
  tempo:
    driver: local
networks:
  spring-cloud-microservice:
    driver: bridge